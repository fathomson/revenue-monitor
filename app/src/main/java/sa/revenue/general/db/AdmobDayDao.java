package sa.revenue.general.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sa.revenue.general.db.AdmobDay;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADMOB_DAY".
*/
public class AdmobDayDao extends AbstractDao<AdmobDay, Long> {

    public static final String TABLENAME = "ADMOB_DAY";

    /**
     * Properties of entity AdmobDay.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "Date", false, "DATE");
        public final static Property AdRequests = new Property(2, String.class, "AdRequests", false, "AD_REQUESTS");
        public final static Property AdRequestsCoverage = new Property(3, String.class, "AdRequestsCoverage", false, "AD_REQUESTS_COVERAGE");
        public final static Property Clicks = new Property(4, String.class, "Clicks", false, "CLICKS");
        public final static Property CostPerClick = new Property(5, String.class, "CostPerClick", false, "COST_PER_CLICK");
        public final static Property Earnings = new Property(6, String.class, "Earnings", false, "EARNINGS");
        public final static Property IndividualAdImpressions = new Property(7, String.class, "IndividualAdImpressions", false, "INDIVIDUAL_AD_IMPRESSIONS");
        public final static Property IndividualAdImpressionsCtr = new Property(8, String.class, "IndividualAdImpressionsCtr", false, "INDIVIDUAL_AD_IMPRESSIONS_CTR");
        public final static Property IndividualAdImpressionsRpm = new Property(9, String.class, "IndividualAdImpressionsRpm", false, "INDIVIDUAL_AD_IMPRESSIONS_RPM");
        public final static Property MatchedAdRequests = new Property(10, String.class, "MatchedAdRequests", false, "MATCHED_AD_REQUESTS");
        public final static Property MatchedAdRequestsCtr = new Property(11, String.class, "MatchedAdRequestsCtr", false, "MATCHED_AD_REQUESTS_CTR");
        public final static Property MatchedAdRequestsRpm = new Property(12, String.class, "MatchedAdRequestsRpm", false, "MATCHED_AD_REQUESTS_RPM");
        public final static Property PageViews = new Property(13, String.class, "PageViews", false, "PAGE_VIEWS");
        public final static Property PageViewsCtr = new Property(14, String.class, "PageViewsCtr", false, "PAGE_VIEWS_CTR");
        public final static Property PageViewsRpm = new Property(15, String.class, "PageViewsRpm", false, "PAGE_VIEWS_RPM");
    };


    public AdmobDayDao(DaoConfig config) {
        super(config);
    }
    
    public AdmobDayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADMOB_DAY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" TEXT," + // 1: Date
                "\"AD_REQUESTS\" TEXT," + // 2: AdRequests
                "\"AD_REQUESTS_COVERAGE\" TEXT," + // 3: AdRequestsCoverage
                "\"CLICKS\" TEXT," + // 4: Clicks
                "\"COST_PER_CLICK\" TEXT," + // 5: CostPerClick
                "\"EARNINGS\" TEXT," + // 6: Earnings
                "\"INDIVIDUAL_AD_IMPRESSIONS\" TEXT," + // 7: IndividualAdImpressions
                "\"INDIVIDUAL_AD_IMPRESSIONS_CTR\" TEXT," + // 8: IndividualAdImpressionsCtr
                "\"INDIVIDUAL_AD_IMPRESSIONS_RPM\" TEXT," + // 9: IndividualAdImpressionsRpm
                "\"MATCHED_AD_REQUESTS\" TEXT," + // 10: MatchedAdRequests
                "\"MATCHED_AD_REQUESTS_CTR\" TEXT," + // 11: MatchedAdRequestsCtr
                "\"MATCHED_AD_REQUESTS_RPM\" TEXT," + // 12: MatchedAdRequestsRpm
                "\"PAGE_VIEWS\" TEXT," + // 13: PageViews
                "\"PAGE_VIEWS_CTR\" TEXT," + // 14: PageViewsCtr
                "\"PAGE_VIEWS_RPM\" TEXT);"); // 15: PageViewsRpm
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADMOB_DAY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AdmobDay entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(2, Date);
        }
 
        String AdRequests = entity.getAdRequests();
        if (AdRequests != null) {
            stmt.bindString(3, AdRequests);
        }
 
        String AdRequestsCoverage = entity.getAdRequestsCoverage();
        if (AdRequestsCoverage != null) {
            stmt.bindString(4, AdRequestsCoverage);
        }
 
        String Clicks = entity.getClicks();
        if (Clicks != null) {
            stmt.bindString(5, Clicks);
        }
 
        String CostPerClick = entity.getCostPerClick();
        if (CostPerClick != null) {
            stmt.bindString(6, CostPerClick);
        }
 
        String Earnings = entity.getEarnings();
        if (Earnings != null) {
            stmt.bindString(7, Earnings);
        }
 
        String IndividualAdImpressions = entity.getIndividualAdImpressions();
        if (IndividualAdImpressions != null) {
            stmt.bindString(8, IndividualAdImpressions);
        }
 
        String IndividualAdImpressionsCtr = entity.getIndividualAdImpressionsCtr();
        if (IndividualAdImpressionsCtr != null) {
            stmt.bindString(9, IndividualAdImpressionsCtr);
        }
 
        String IndividualAdImpressionsRpm = entity.getIndividualAdImpressionsRpm();
        if (IndividualAdImpressionsRpm != null) {
            stmt.bindString(10, IndividualAdImpressionsRpm);
        }
 
        String MatchedAdRequests = entity.getMatchedAdRequests();
        if (MatchedAdRequests != null) {
            stmt.bindString(11, MatchedAdRequests);
        }
 
        String MatchedAdRequestsCtr = entity.getMatchedAdRequestsCtr();
        if (MatchedAdRequestsCtr != null) {
            stmt.bindString(12, MatchedAdRequestsCtr);
        }
 
        String MatchedAdRequestsRpm = entity.getMatchedAdRequestsRpm();
        if (MatchedAdRequestsRpm != null) {
            stmt.bindString(13, MatchedAdRequestsRpm);
        }
 
        String PageViews = entity.getPageViews();
        if (PageViews != null) {
            stmt.bindString(14, PageViews);
        }
 
        String PageViewsCtr = entity.getPageViewsCtr();
        if (PageViewsCtr != null) {
            stmt.bindString(15, PageViewsCtr);
        }
 
        String PageViewsRpm = entity.getPageViewsRpm();
        if (PageViewsRpm != null) {
            stmt.bindString(16, PageViewsRpm);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AdmobDay readEntity(Cursor cursor, int offset) {
        AdmobDay entity = new AdmobDay( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AdRequests
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AdRequestsCoverage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Clicks
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CostPerClick
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Earnings
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // IndividualAdImpressions
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // IndividualAdImpressionsCtr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // IndividualAdImpressionsRpm
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // MatchedAdRequests
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // MatchedAdRequestsCtr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // MatchedAdRequestsRpm
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // PageViews
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // PageViewsCtr
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // PageViewsRpm
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AdmobDay entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdRequests(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdRequestsCoverage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClicks(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCostPerClick(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEarnings(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIndividualAdImpressions(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIndividualAdImpressionsCtr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIndividualAdImpressionsRpm(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMatchedAdRequests(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMatchedAdRequestsCtr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMatchedAdRequestsRpm(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPageViews(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPageViewsCtr(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPageViewsRpm(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AdmobDay entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AdmobDay entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
