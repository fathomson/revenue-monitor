package sa.revenue.general.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import sa.revenue.general.db.AdmobAdUnit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADMOB_AD_UNIT".
*/
public class AdmobAdUnitDao extends AbstractDao<AdmobAdUnit, Long> {

    public static final String TABLENAME = "ADMOB_AD_UNIT";

    /**
     * Properties of entity AdmobAdUnit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdPlacementId = new Property(1, long.class, "AdPlacementId", false, "AD_PLACEMENT_ID");
        public final static Property AdClientId = new Property(2, String.class, "AdClientId", false, "AD_CLIENT_ID");
        public final static Property AdUnitCode = new Property(3, String.class, "AdUnitCode", false, "AD_UNIT_CODE");
        public final static Property AdUnitId = new Property(4, String.class, "AdUnitId", false, "AD_UNIT_ID");
        public final static Property AdUnitName = new Property(5, String.class, "AdUnitName", false, "AD_UNIT_NAME");
        public final static Property Date = new Property(6, String.class, "Date", false, "DATE");
        public final static Property AdRequests = new Property(7, String.class, "AdRequests", false, "AD_REQUESTS");
        public final static Property AdRequestsCoverage = new Property(8, String.class, "AdRequestsCoverage", false, "AD_REQUESTS_COVERAGE");
        public final static Property Clicks = new Property(9, String.class, "Clicks", false, "CLICKS");
        public final static Property CostPerClick = new Property(10, String.class, "CostPerClick", false, "COST_PER_CLICK");
        public final static Property Earnings = new Property(11, String.class, "Earnings", false, "EARNINGS");
        public final static Property IndividualAdImpressions = new Property(12, String.class, "IndividualAdImpressions", false, "INDIVIDUAL_AD_IMPRESSIONS");
        public final static Property IndividualAdImpressionsCtr = new Property(13, String.class, "IndividualAdImpressionsCtr", false, "INDIVIDUAL_AD_IMPRESSIONS_CTR");
        public final static Property IndividualAdImpressionsRpm = new Property(14, String.class, "IndividualAdImpressionsRpm", false, "INDIVIDUAL_AD_IMPRESSIONS_RPM");
        public final static Property MatchedAdRequests = new Property(15, String.class, "MatchedAdRequests", false, "MATCHED_AD_REQUESTS");
        public final static Property MatchedAdRequestsCtr = new Property(16, String.class, "MatchedAdRequestsCtr", false, "MATCHED_AD_REQUESTS_CTR");
        public final static Property MatchedAdRequestsRpm = new Property(17, String.class, "MatchedAdRequestsRpm", false, "MATCHED_AD_REQUESTS_RPM");
        public final static Property PageViews = new Property(18, String.class, "PageViews", false, "PAGE_VIEWS");
        public final static Property PageViewsCtr = new Property(19, String.class, "PageViewsCtr", false, "PAGE_VIEWS_CTR");
        public final static Property PageViewsRpm = new Property(20, String.class, "PageViewsRpm", false, "PAGE_VIEWS_RPM");
    };

    private DaoSession daoSession;

    private Query<AdmobAdUnit> adPlacement_AdmobResultsQuery;

    public AdmobAdUnitDao(DaoConfig config) {
        super(config);
    }
    
    public AdmobAdUnitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADMOB_AD_UNIT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AD_PLACEMENT_ID\" INTEGER NOT NULL ," + // 1: AdPlacementId
                "\"AD_CLIENT_ID\" TEXT," + // 2: AdClientId
                "\"AD_UNIT_CODE\" TEXT," + // 3: AdUnitCode
                "\"AD_UNIT_ID\" TEXT," + // 4: AdUnitId
                "\"AD_UNIT_NAME\" TEXT," + // 5: AdUnitName
                "\"DATE\" TEXT," + // 6: Date
                "\"AD_REQUESTS\" TEXT," + // 7: AdRequests
                "\"AD_REQUESTS_COVERAGE\" TEXT," + // 8: AdRequestsCoverage
                "\"CLICKS\" TEXT," + // 9: Clicks
                "\"COST_PER_CLICK\" TEXT," + // 10: CostPerClick
                "\"EARNINGS\" TEXT," + // 11: Earnings
                "\"INDIVIDUAL_AD_IMPRESSIONS\" TEXT," + // 12: IndividualAdImpressions
                "\"INDIVIDUAL_AD_IMPRESSIONS_CTR\" TEXT," + // 13: IndividualAdImpressionsCtr
                "\"INDIVIDUAL_AD_IMPRESSIONS_RPM\" TEXT," + // 14: IndividualAdImpressionsRpm
                "\"MATCHED_AD_REQUESTS\" TEXT," + // 15: MatchedAdRequests
                "\"MATCHED_AD_REQUESTS_CTR\" TEXT," + // 16: MatchedAdRequestsCtr
                "\"MATCHED_AD_REQUESTS_RPM\" TEXT," + // 17: MatchedAdRequestsRpm
                "\"PAGE_VIEWS\" TEXT," + // 18: PageViews
                "\"PAGE_VIEWS_CTR\" TEXT," + // 19: PageViewsCtr
                "\"PAGE_VIEWS_RPM\" TEXT);"); // 20: PageViewsRpm
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADMOB_AD_UNIT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AdmobAdUnit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAdPlacementId());
 
        String AdClientId = entity.getAdClientId();
        if (AdClientId != null) {
            stmt.bindString(3, AdClientId);
        }
 
        String AdUnitCode = entity.getAdUnitCode();
        if (AdUnitCode != null) {
            stmt.bindString(4, AdUnitCode);
        }
 
        String AdUnitId = entity.getAdUnitId();
        if (AdUnitId != null) {
            stmt.bindString(5, AdUnitId);
        }
 
        String AdUnitName = entity.getAdUnitName();
        if (AdUnitName != null) {
            stmt.bindString(6, AdUnitName);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(7, Date);
        }
 
        String AdRequests = entity.getAdRequests();
        if (AdRequests != null) {
            stmt.bindString(8, AdRequests);
        }
 
        String AdRequestsCoverage = entity.getAdRequestsCoverage();
        if (AdRequestsCoverage != null) {
            stmt.bindString(9, AdRequestsCoverage);
        }
 
        String Clicks = entity.getClicks();
        if (Clicks != null) {
            stmt.bindString(10, Clicks);
        }
 
        String CostPerClick = entity.getCostPerClick();
        if (CostPerClick != null) {
            stmt.bindString(11, CostPerClick);
        }
 
        String Earnings = entity.getEarnings();
        if (Earnings != null) {
            stmt.bindString(12, Earnings);
        }
 
        String IndividualAdImpressions = entity.getIndividualAdImpressions();
        if (IndividualAdImpressions != null) {
            stmt.bindString(13, IndividualAdImpressions);
        }
 
        String IndividualAdImpressionsCtr = entity.getIndividualAdImpressionsCtr();
        if (IndividualAdImpressionsCtr != null) {
            stmt.bindString(14, IndividualAdImpressionsCtr);
        }
 
        String IndividualAdImpressionsRpm = entity.getIndividualAdImpressionsRpm();
        if (IndividualAdImpressionsRpm != null) {
            stmt.bindString(15, IndividualAdImpressionsRpm);
        }
 
        String MatchedAdRequests = entity.getMatchedAdRequests();
        if (MatchedAdRequests != null) {
            stmt.bindString(16, MatchedAdRequests);
        }
 
        String MatchedAdRequestsCtr = entity.getMatchedAdRequestsCtr();
        if (MatchedAdRequestsCtr != null) {
            stmt.bindString(17, MatchedAdRequestsCtr);
        }
 
        String MatchedAdRequestsRpm = entity.getMatchedAdRequestsRpm();
        if (MatchedAdRequestsRpm != null) {
            stmt.bindString(18, MatchedAdRequestsRpm);
        }
 
        String PageViews = entity.getPageViews();
        if (PageViews != null) {
            stmt.bindString(19, PageViews);
        }
 
        String PageViewsCtr = entity.getPageViewsCtr();
        if (PageViewsCtr != null) {
            stmt.bindString(20, PageViewsCtr);
        }
 
        String PageViewsRpm = entity.getPageViewsRpm();
        if (PageViewsRpm != null) {
            stmt.bindString(21, PageViewsRpm);
        }
    }

    @Override
    protected void attachEntity(AdmobAdUnit entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AdmobAdUnit readEntity(Cursor cursor, int offset) {
        AdmobAdUnit entity = new AdmobAdUnit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // AdPlacementId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AdClientId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AdUnitCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AdUnitId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // AdUnitName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // AdRequests
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // AdRequestsCoverage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Clicks
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CostPerClick
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Earnings
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // IndividualAdImpressions
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // IndividualAdImpressionsCtr
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // IndividualAdImpressionsRpm
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // MatchedAdRequests
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // MatchedAdRequestsCtr
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // MatchedAdRequestsRpm
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // PageViews
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // PageViewsCtr
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // PageViewsRpm
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AdmobAdUnit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdPlacementId(cursor.getLong(offset + 1));
        entity.setAdClientId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdUnitCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdUnitId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdUnitName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdRequests(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAdRequestsCoverage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClicks(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCostPerClick(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEarnings(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIndividualAdImpressions(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIndividualAdImpressionsCtr(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIndividualAdImpressionsRpm(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMatchedAdRequests(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMatchedAdRequestsCtr(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMatchedAdRequestsRpm(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPageViews(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPageViewsCtr(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPageViewsRpm(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AdmobAdUnit entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AdmobAdUnit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "AdmobResults" to-many relationship of AdPlacement. */
    public List<AdmobAdUnit> _queryAdPlacement_AdmobResults(long AdPlacementId) {
        synchronized (this) {
            if (adPlacement_AdmobResultsQuery == null) {
                QueryBuilder<AdmobAdUnit> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AdPlacementId.eq(null));
                adPlacement_AdmobResultsQuery = queryBuilder.build();
            }
        }
        Query<AdmobAdUnit> query = adPlacement_AdmobResultsQuery.forCurrentThread();
        query.setParameter(0, AdPlacementId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAdPlacementDao().getAllColumns());
            builder.append(" FROM ADMOB_AD_UNIT T");
            builder.append(" LEFT JOIN AD_PLACEMENT T0 ON T.\"AD_PLACEMENT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected AdmobAdUnit loadCurrentDeep(Cursor cursor, boolean lock) {
        AdmobAdUnit entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        AdPlacement adPlacement = loadCurrentOther(daoSession.getAdPlacementDao(), cursor, offset);
         if(adPlacement != null) {
            entity.setAdPlacement(adPlacement);
        }

        return entity;    
    }

    public AdmobAdUnit loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<AdmobAdUnit> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AdmobAdUnit> list = new ArrayList<AdmobAdUnit>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<AdmobAdUnit> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<AdmobAdUnit> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
