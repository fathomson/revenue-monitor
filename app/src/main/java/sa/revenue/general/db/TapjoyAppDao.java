package sa.revenue.general.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import sa.revenue.general.db.TapjoyApp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAPJOY_APP".
*/
public class TapjoyAppDao extends AbstractDao<TapjoyApp, Long> {

    public static final String TABLENAME = "TAPJOY_APP";

    /**
     * Properties of entity TapjoyApp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdPlacementId = new Property(1, long.class, "AdPlacementId", false, "AD_PLACEMENT_ID");
        public final static Property Date = new Property(2, String.class, "Date", false, "DATE");
        public final static Property Name = new Property(3, String.class, "Name", false, "NAME");
        public final static Property AppStoreID = new Property(4, String.class, "AppStoreID", false, "APP_STORE_ID");
        public final static Property AppName = new Property(5, String.class, "AppName", false, "APP_NAME");
        public final static Property AppKey = new Property(6, String.class, "AppKey", false, "APP_KEY");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property Platform = new Property(8, String.class, "Platform", false, "PLATFORM");
        public final static Property Rewarded = new Property(9, Boolean.class, "Rewarded", false, "REWARDED");
        public final static Property OfferType = new Property(10, String.class, "OfferType", false, "OFFER_TYPE");
        public final static Property PaidInstalls = new Property(11, Integer.class, "PaidInstalls", false, "PAID_INSTALLS");
        public final static Property PaidInstallsHourly = new Property(12, String.class, "PaidInstallsHourly", false, "PAID_INSTALLS_HOURLY");
        public final static Property PaidClicks = new Property(13, Integer.class, "PaidClicks", false, "PAID_CLICKS");
        public final static Property PaidClicksHourly = new Property(14, String.class, "PaidClicksHourly", false, "PAID_CLICKS_HOURLY");
        public final static Property Spend = new Property(15, Double.class, "Spend", false, "SPEND");
        public final static Property SpendHourly = new Property(16, String.class, "SpendHourly", false, "SPEND_HOURLY");
        public final static Property Sessions = new Property(17, Integer.class, "Sessions", false, "SESSIONS");
        public final static Property SessionsHourly = new Property(18, String.class, "SessionsHourly", false, "SESSIONS_HOURLY");
        public final static Property NewUsers = new Property(19, Integer.class, "NewUsers", false, "NEW_USERS");
        public final static Property NewUsersHourly = new Property(20, String.class, "NewUsersHourly", false, "NEW_USERS_HOURLY");
        public final static Property DailyActiveUsers = new Property(21, Integer.class, "DailyActiveUsers", false, "DAILY_ACTIVE_USERS");
        public final static Property OfferwallRevenue = new Property(22, Double.class, "OfferwallRevenue", false, "OFFERWALL_REVENUE");
        public final static Property OfferwallRevenueHourly = new Property(23, String.class, "OfferwallRevenueHourly", false, "OFFERWALL_REVENUE_HOURLY");
        public final static Property OfferwallImpressions = new Property(24, Integer.class, "OfferwallImpressions", false, "OFFERWALL_IMPRESSIONS");
        public final static Property OfferwallImpressionsHourly = new Property(25, String.class, "OfferwallImpressionsHourly", false, "OFFERWALL_IMPRESSIONS_HOURLY");
        public final static Property OfferwallClicks = new Property(26, Integer.class, "OfferwallClicks", false, "OFFERWALL_CLICKS");
        public final static Property OfferwallClicksHourly = new Property(27, String.class, "OfferwallClicksHourly", false, "OFFERWALL_CLICKS_HOURLY");
        public final static Property OfferwallConversions = new Property(28, Integer.class, "OfferwallConversions", false, "OFFERWALL_CONVERSIONS");
        public final static Property OfferwallConversionsHourly = new Property(29, String.class, "OfferwallConversionsHourly", false, "OFFERWALL_CONVERSIONS_HOURLY");
        public final static Property FeaturedOfferRevenue = new Property(30, Double.class, "FeaturedOfferRevenue", false, "FEATURED_OFFER_REVENUE");
        public final static Property FeaturedOfferRevenueHourly = new Property(31, String.class, "FeaturedOfferRevenueHourly", false, "FEATURED_OFFER_REVENUE_HOURLY");
        public final static Property FeaturedOfferImpressions = new Property(32, Integer.class, "FeaturedOfferImpressions", false, "FEATURED_OFFER_IMPRESSIONS");
        public final static Property FeaturedOfferImpressionsHourly = new Property(33, String.class, "FeaturedOfferImpressionsHourly", false, "FEATURED_OFFER_IMPRESSIONS_HOURLY");
        public final static Property FeaturedOfferClicks = new Property(34, Integer.class, "FeaturedOfferClicks", false, "FEATURED_OFFER_CLICKS");
        public final static Property FeaturedOfferClicksHourly = new Property(35, String.class, "FeaturedOfferClicksHourly", false, "FEATURED_OFFER_CLICKS_HOURLY");
        public final static Property FeaturedOfferConversions = new Property(36, Integer.class, "FeaturedOfferConversions", false, "FEATURED_OFFER_CONVERSIONS");
        public final static Property FeaturedOfferConversionsHourly = new Property(37, String.class, "FeaturedOfferConversionsHourly", false, "FEATURED_OFFER_CONVERSIONS_HOURLY");
        public final static Property TJMOfferwallRevenue = new Property(38, Double.class, "TJMOfferwallRevenue", false, "TJMOFFERWALL_REVENUE");
        public final static Property TJMOfferwallRevenueHourly = new Property(39, String.class, "TJMOfferwallRevenueHourly", false, "TJMOFFERWALL_REVENUE_HOURLY");
        public final static Property TJMOfferwallImpressions = new Property(40, Integer.class, "TJMOfferwallImpressions", false, "TJMOFFERWALL_IMPRESSIONS");
        public final static Property TJMOfferwallImpressionsHourly = new Property(41, String.class, "TJMOfferwallImpressionsHourly", false, "TJMOFFERWALL_IMPRESSIONS_HOURLY");
        public final static Property TJMOfferwallClicks = new Property(42, Integer.class, "TJMOfferwallClicks", false, "TJMOFFERWALL_CLICKS");
        public final static Property TJMOfferwallClicksHourly = new Property(43, String.class, "TJMOfferwallClicksHourly", false, "TJMOFFERWALL_CLICKS_HOURLY");
        public final static Property TJMOfferwallConversions = new Property(44, Integer.class, "TJMOfferwallConversions", false, "TJMOFFERWALL_CONVERSIONS");
        public final static Property TJMOfferwallConversionsHourly = new Property(45, String.class, "TJMOfferwallConversionsHourly", false, "TJMOFFERWALL_CONVERSIONS_HOURLY");
        public final static Property DirectPlayRevenue = new Property(46, Double.class, "DirectPlayRevenue", false, "DIRECT_PLAY_REVENUE");
        public final static Property DirectPlayRevenueHourly = new Property(47, String.class, "DirectPlayRevenueHourly", false, "DIRECT_PLAY_REVENUE_HOURLY");
        public final static Property DirectPlayImpressions = new Property(48, Integer.class, "DirectPlayImpressions", false, "DIRECT_PLAY_IMPRESSIONS");
        public final static Property DirectPlayImpressionsHourly = new Property(49, String.class, "DirectPlayImpressionsHourly", false, "DIRECT_PLAY_IMPRESSIONS_HOURLY");
        public final static Property DirectPlayClicks = new Property(50, Integer.class, "DirectPlayClicks", false, "DIRECT_PLAY_CLICKS");
        public final static Property DirectPlayClicksHourly = new Property(51, String.class, "DirectPlayClicksHourly", false, "DIRECT_PLAY_CLICKS_HOURLY");
        public final static Property DirectPlayConversions = new Property(52, Integer.class, "DirectPlayConversions", false, "DIRECT_PLAY_CONVERSIONS");
        public final static Property DirectPlayConversionsHourly = new Property(53, String.class, "DirectPlayConversionsHourly", false, "DIRECT_PLAY_CONVERSIONS_HOURLY");
    };

    private DaoSession daoSession;

    private Query<TapjoyApp> adPlacement_TapjoyResultsQuery;

    public TapjoyAppDao(DaoConfig config) {
        super(config);
    }
    
    public TapjoyAppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAPJOY_APP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AD_PLACEMENT_ID\" INTEGER NOT NULL ," + // 1: AdPlacementId
                "\"DATE\" TEXT," + // 2: Date
                "\"NAME\" TEXT," + // 3: Name
                "\"APP_STORE_ID\" TEXT," + // 4: AppStoreID
                "\"APP_NAME\" TEXT," + // 5: AppName
                "\"APP_KEY\" TEXT," + // 6: AppKey
                "\"URL\" TEXT," + // 7: url
                "\"PLATFORM\" TEXT," + // 8: Platform
                "\"REWARDED\" INTEGER," + // 9: Rewarded
                "\"OFFER_TYPE\" TEXT," + // 10: OfferType
                "\"PAID_INSTALLS\" INTEGER," + // 11: PaidInstalls
                "\"PAID_INSTALLS_HOURLY\" TEXT," + // 12: PaidInstallsHourly
                "\"PAID_CLICKS\" INTEGER," + // 13: PaidClicks
                "\"PAID_CLICKS_HOURLY\" TEXT," + // 14: PaidClicksHourly
                "\"SPEND\" REAL," + // 15: Spend
                "\"SPEND_HOURLY\" TEXT," + // 16: SpendHourly
                "\"SESSIONS\" INTEGER," + // 17: Sessions
                "\"SESSIONS_HOURLY\" TEXT," + // 18: SessionsHourly
                "\"NEW_USERS\" INTEGER," + // 19: NewUsers
                "\"NEW_USERS_HOURLY\" TEXT," + // 20: NewUsersHourly
                "\"DAILY_ACTIVE_USERS\" INTEGER," + // 21: DailyActiveUsers
                "\"OFFERWALL_REVENUE\" REAL," + // 22: OfferwallRevenue
                "\"OFFERWALL_REVENUE_HOURLY\" TEXT," + // 23: OfferwallRevenueHourly
                "\"OFFERWALL_IMPRESSIONS\" INTEGER," + // 24: OfferwallImpressions
                "\"OFFERWALL_IMPRESSIONS_HOURLY\" TEXT," + // 25: OfferwallImpressionsHourly
                "\"OFFERWALL_CLICKS\" INTEGER," + // 26: OfferwallClicks
                "\"OFFERWALL_CLICKS_HOURLY\" TEXT," + // 27: OfferwallClicksHourly
                "\"OFFERWALL_CONVERSIONS\" INTEGER," + // 28: OfferwallConversions
                "\"OFFERWALL_CONVERSIONS_HOURLY\" TEXT," + // 29: OfferwallConversionsHourly
                "\"FEATURED_OFFER_REVENUE\" REAL," + // 30: FeaturedOfferRevenue
                "\"FEATURED_OFFER_REVENUE_HOURLY\" TEXT," + // 31: FeaturedOfferRevenueHourly
                "\"FEATURED_OFFER_IMPRESSIONS\" INTEGER," + // 32: FeaturedOfferImpressions
                "\"FEATURED_OFFER_IMPRESSIONS_HOURLY\" TEXT," + // 33: FeaturedOfferImpressionsHourly
                "\"FEATURED_OFFER_CLICKS\" INTEGER," + // 34: FeaturedOfferClicks
                "\"FEATURED_OFFER_CLICKS_HOURLY\" TEXT," + // 35: FeaturedOfferClicksHourly
                "\"FEATURED_OFFER_CONVERSIONS\" INTEGER," + // 36: FeaturedOfferConversions
                "\"FEATURED_OFFER_CONVERSIONS_HOURLY\" TEXT," + // 37: FeaturedOfferConversionsHourly
                "\"TJMOFFERWALL_REVENUE\" REAL," + // 38: TJMOfferwallRevenue
                "\"TJMOFFERWALL_REVENUE_HOURLY\" TEXT," + // 39: TJMOfferwallRevenueHourly
                "\"TJMOFFERWALL_IMPRESSIONS\" INTEGER," + // 40: TJMOfferwallImpressions
                "\"TJMOFFERWALL_IMPRESSIONS_HOURLY\" TEXT," + // 41: TJMOfferwallImpressionsHourly
                "\"TJMOFFERWALL_CLICKS\" INTEGER," + // 42: TJMOfferwallClicks
                "\"TJMOFFERWALL_CLICKS_HOURLY\" TEXT," + // 43: TJMOfferwallClicksHourly
                "\"TJMOFFERWALL_CONVERSIONS\" INTEGER," + // 44: TJMOfferwallConversions
                "\"TJMOFFERWALL_CONVERSIONS_HOURLY\" TEXT," + // 45: TJMOfferwallConversionsHourly
                "\"DIRECT_PLAY_REVENUE\" REAL," + // 46: DirectPlayRevenue
                "\"DIRECT_PLAY_REVENUE_HOURLY\" TEXT," + // 47: DirectPlayRevenueHourly
                "\"DIRECT_PLAY_IMPRESSIONS\" INTEGER," + // 48: DirectPlayImpressions
                "\"DIRECT_PLAY_IMPRESSIONS_HOURLY\" TEXT," + // 49: DirectPlayImpressionsHourly
                "\"DIRECT_PLAY_CLICKS\" INTEGER," + // 50: DirectPlayClicks
                "\"DIRECT_PLAY_CLICKS_HOURLY\" TEXT," + // 51: DirectPlayClicksHourly
                "\"DIRECT_PLAY_CONVERSIONS\" INTEGER," + // 52: DirectPlayConversions
                "\"DIRECT_PLAY_CONVERSIONS_HOURLY\" TEXT);"); // 53: DirectPlayConversionsHourly
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAPJOY_APP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TapjoyApp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAdPlacementId());
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(3, Date);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(4, Name);
        }
 
        String AppStoreID = entity.getAppStoreID();
        if (AppStoreID != null) {
            stmt.bindString(5, AppStoreID);
        }
 
        String AppName = entity.getAppName();
        if (AppName != null) {
            stmt.bindString(6, AppName);
        }
 
        String AppKey = entity.getAppKey();
        if (AppKey != null) {
            stmt.bindString(7, AppKey);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String Platform = entity.getPlatform();
        if (Platform != null) {
            stmt.bindString(9, Platform);
        }
 
        Boolean Rewarded = entity.getRewarded();
        if (Rewarded != null) {
            stmt.bindLong(10, Rewarded ? 1L: 0L);
        }
 
        String OfferType = entity.getOfferType();
        if (OfferType != null) {
            stmt.bindString(11, OfferType);
        }
 
        Integer PaidInstalls = entity.getPaidInstalls();
        if (PaidInstalls != null) {
            stmt.bindLong(12, PaidInstalls);
        }
 
        String PaidInstallsHourly = entity.getPaidInstallsHourly();
        if (PaidInstallsHourly != null) {
            stmt.bindString(13, PaidInstallsHourly);
        }
 
        Integer PaidClicks = entity.getPaidClicks();
        if (PaidClicks != null) {
            stmt.bindLong(14, PaidClicks);
        }
 
        String PaidClicksHourly = entity.getPaidClicksHourly();
        if (PaidClicksHourly != null) {
            stmt.bindString(15, PaidClicksHourly);
        }
 
        Double Spend = entity.getSpend();
        if (Spend != null) {
            stmt.bindDouble(16, Spend);
        }
 
        String SpendHourly = entity.getSpendHourly();
        if (SpendHourly != null) {
            stmt.bindString(17, SpendHourly);
        }
 
        Integer Sessions = entity.getSessions();
        if (Sessions != null) {
            stmt.bindLong(18, Sessions);
        }
 
        String SessionsHourly = entity.getSessionsHourly();
        if (SessionsHourly != null) {
            stmt.bindString(19, SessionsHourly);
        }
 
        Integer NewUsers = entity.getNewUsers();
        if (NewUsers != null) {
            stmt.bindLong(20, NewUsers);
        }
 
        String NewUsersHourly = entity.getNewUsersHourly();
        if (NewUsersHourly != null) {
            stmt.bindString(21, NewUsersHourly);
        }
 
        Integer DailyActiveUsers = entity.getDailyActiveUsers();
        if (DailyActiveUsers != null) {
            stmt.bindLong(22, DailyActiveUsers);
        }
 
        Double OfferwallRevenue = entity.getOfferwallRevenue();
        if (OfferwallRevenue != null) {
            stmt.bindDouble(23, OfferwallRevenue);
        }
 
        String OfferwallRevenueHourly = entity.getOfferwallRevenueHourly();
        if (OfferwallRevenueHourly != null) {
            stmt.bindString(24, OfferwallRevenueHourly);
        }
 
        Integer OfferwallImpressions = entity.getOfferwallImpressions();
        if (OfferwallImpressions != null) {
            stmt.bindLong(25, OfferwallImpressions);
        }
 
        String OfferwallImpressionsHourly = entity.getOfferwallImpressionsHourly();
        if (OfferwallImpressionsHourly != null) {
            stmt.bindString(26, OfferwallImpressionsHourly);
        }
 
        Integer OfferwallClicks = entity.getOfferwallClicks();
        if (OfferwallClicks != null) {
            stmt.bindLong(27, OfferwallClicks);
        }
 
        String OfferwallClicksHourly = entity.getOfferwallClicksHourly();
        if (OfferwallClicksHourly != null) {
            stmt.bindString(28, OfferwallClicksHourly);
        }
 
        Integer OfferwallConversions = entity.getOfferwallConversions();
        if (OfferwallConversions != null) {
            stmt.bindLong(29, OfferwallConversions);
        }
 
        String OfferwallConversionsHourly = entity.getOfferwallConversionsHourly();
        if (OfferwallConversionsHourly != null) {
            stmt.bindString(30, OfferwallConversionsHourly);
        }
 
        Double FeaturedOfferRevenue = entity.getFeaturedOfferRevenue();
        if (FeaturedOfferRevenue != null) {
            stmt.bindDouble(31, FeaturedOfferRevenue);
        }
 
        String FeaturedOfferRevenueHourly = entity.getFeaturedOfferRevenueHourly();
        if (FeaturedOfferRevenueHourly != null) {
            stmt.bindString(32, FeaturedOfferRevenueHourly);
        }
 
        Integer FeaturedOfferImpressions = entity.getFeaturedOfferImpressions();
        if (FeaturedOfferImpressions != null) {
            stmt.bindLong(33, FeaturedOfferImpressions);
        }
 
        String FeaturedOfferImpressionsHourly = entity.getFeaturedOfferImpressionsHourly();
        if (FeaturedOfferImpressionsHourly != null) {
            stmt.bindString(34, FeaturedOfferImpressionsHourly);
        }
 
        Integer FeaturedOfferClicks = entity.getFeaturedOfferClicks();
        if (FeaturedOfferClicks != null) {
            stmt.bindLong(35, FeaturedOfferClicks);
        }
 
        String FeaturedOfferClicksHourly = entity.getFeaturedOfferClicksHourly();
        if (FeaturedOfferClicksHourly != null) {
            stmt.bindString(36, FeaturedOfferClicksHourly);
        }
 
        Integer FeaturedOfferConversions = entity.getFeaturedOfferConversions();
        if (FeaturedOfferConversions != null) {
            stmt.bindLong(37, FeaturedOfferConversions);
        }
 
        String FeaturedOfferConversionsHourly = entity.getFeaturedOfferConversionsHourly();
        if (FeaturedOfferConversionsHourly != null) {
            stmt.bindString(38, FeaturedOfferConversionsHourly);
        }
 
        Double TJMOfferwallRevenue = entity.getTJMOfferwallRevenue();
        if (TJMOfferwallRevenue != null) {
            stmt.bindDouble(39, TJMOfferwallRevenue);
        }
 
        String TJMOfferwallRevenueHourly = entity.getTJMOfferwallRevenueHourly();
        if (TJMOfferwallRevenueHourly != null) {
            stmt.bindString(40, TJMOfferwallRevenueHourly);
        }
 
        Integer TJMOfferwallImpressions = entity.getTJMOfferwallImpressions();
        if (TJMOfferwallImpressions != null) {
            stmt.bindLong(41, TJMOfferwallImpressions);
        }
 
        String TJMOfferwallImpressionsHourly = entity.getTJMOfferwallImpressionsHourly();
        if (TJMOfferwallImpressionsHourly != null) {
            stmt.bindString(42, TJMOfferwallImpressionsHourly);
        }
 
        Integer TJMOfferwallClicks = entity.getTJMOfferwallClicks();
        if (TJMOfferwallClicks != null) {
            stmt.bindLong(43, TJMOfferwallClicks);
        }
 
        String TJMOfferwallClicksHourly = entity.getTJMOfferwallClicksHourly();
        if (TJMOfferwallClicksHourly != null) {
            stmt.bindString(44, TJMOfferwallClicksHourly);
        }
 
        Integer TJMOfferwallConversions = entity.getTJMOfferwallConversions();
        if (TJMOfferwallConversions != null) {
            stmt.bindLong(45, TJMOfferwallConversions);
        }
 
        String TJMOfferwallConversionsHourly = entity.getTJMOfferwallConversionsHourly();
        if (TJMOfferwallConversionsHourly != null) {
            stmt.bindString(46, TJMOfferwallConversionsHourly);
        }
 
        Double DirectPlayRevenue = entity.getDirectPlayRevenue();
        if (DirectPlayRevenue != null) {
            stmt.bindDouble(47, DirectPlayRevenue);
        }
 
        String DirectPlayRevenueHourly = entity.getDirectPlayRevenueHourly();
        if (DirectPlayRevenueHourly != null) {
            stmt.bindString(48, DirectPlayRevenueHourly);
        }
 
        Integer DirectPlayImpressions = entity.getDirectPlayImpressions();
        if (DirectPlayImpressions != null) {
            stmt.bindLong(49, DirectPlayImpressions);
        }
 
        String DirectPlayImpressionsHourly = entity.getDirectPlayImpressionsHourly();
        if (DirectPlayImpressionsHourly != null) {
            stmt.bindString(50, DirectPlayImpressionsHourly);
        }
 
        Integer DirectPlayClicks = entity.getDirectPlayClicks();
        if (DirectPlayClicks != null) {
            stmt.bindLong(51, DirectPlayClicks);
        }
 
        String DirectPlayClicksHourly = entity.getDirectPlayClicksHourly();
        if (DirectPlayClicksHourly != null) {
            stmt.bindString(52, DirectPlayClicksHourly);
        }
 
        Integer DirectPlayConversions = entity.getDirectPlayConversions();
        if (DirectPlayConversions != null) {
            stmt.bindLong(53, DirectPlayConversions);
        }
 
        String DirectPlayConversionsHourly = entity.getDirectPlayConversionsHourly();
        if (DirectPlayConversionsHourly != null) {
            stmt.bindString(54, DirectPlayConversionsHourly);
        }
    }

    @Override
    protected void attachEntity(TapjoyApp entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TapjoyApp readEntity(Cursor cursor, int offset) {
        TapjoyApp entity = new TapjoyApp( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // AdPlacementId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AppStoreID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // AppName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // AppKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Platform
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // Rewarded
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // OfferType
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // PaidInstalls
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // PaidInstallsHourly
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // PaidClicks
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // PaidClicksHourly
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // Spend
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // SpendHourly
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // Sessions
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // SessionsHourly
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // NewUsers
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // NewUsersHourly
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // DailyActiveUsers
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // OfferwallRevenue
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // OfferwallRevenueHourly
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // OfferwallImpressions
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // OfferwallImpressionsHourly
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // OfferwallClicks
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // OfferwallClicksHourly
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // OfferwallConversions
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // OfferwallConversionsHourly
            cursor.isNull(offset + 30) ? null : cursor.getDouble(offset + 30), // FeaturedOfferRevenue
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // FeaturedOfferRevenueHourly
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // FeaturedOfferImpressions
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // FeaturedOfferImpressionsHourly
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // FeaturedOfferClicks
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // FeaturedOfferClicksHourly
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // FeaturedOfferConversions
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // FeaturedOfferConversionsHourly
            cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38), // TJMOfferwallRevenue
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // TJMOfferwallRevenueHourly
            cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40), // TJMOfferwallImpressions
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // TJMOfferwallImpressionsHourly
            cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42), // TJMOfferwallClicks
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // TJMOfferwallClicksHourly
            cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44), // TJMOfferwallConversions
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // TJMOfferwallConversionsHourly
            cursor.isNull(offset + 46) ? null : cursor.getDouble(offset + 46), // DirectPlayRevenue
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // DirectPlayRevenueHourly
            cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48), // DirectPlayImpressions
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // DirectPlayImpressionsHourly
            cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50), // DirectPlayClicks
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // DirectPlayClicksHourly
            cursor.isNull(offset + 52) ? null : cursor.getInt(offset + 52), // DirectPlayConversions
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53) // DirectPlayConversionsHourly
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TapjoyApp entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdPlacementId(cursor.getLong(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAppStoreID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAppName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAppKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlatform(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRewarded(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setOfferType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPaidInstalls(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPaidInstallsHourly(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPaidClicks(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setPaidClicksHourly(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSpend(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setSpendHourly(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSessions(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setSessionsHourly(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNewUsers(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setNewUsersHourly(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDailyActiveUsers(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setOfferwallRevenue(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setOfferwallRevenueHourly(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOfferwallImpressions(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setOfferwallImpressionsHourly(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setOfferwallClicks(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setOfferwallClicksHourly(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setOfferwallConversions(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setOfferwallConversionsHourly(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setFeaturedOfferRevenue(cursor.isNull(offset + 30) ? null : cursor.getDouble(offset + 30));
        entity.setFeaturedOfferRevenueHourly(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setFeaturedOfferImpressions(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setFeaturedOfferImpressionsHourly(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setFeaturedOfferClicks(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setFeaturedOfferClicksHourly(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setFeaturedOfferConversions(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setFeaturedOfferConversionsHourly(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setTJMOfferwallRevenue(cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38));
        entity.setTJMOfferwallRevenueHourly(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setTJMOfferwallImpressions(cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40));
        entity.setTJMOfferwallImpressionsHourly(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setTJMOfferwallClicks(cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42));
        entity.setTJMOfferwallClicksHourly(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setTJMOfferwallConversions(cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44));
        entity.setTJMOfferwallConversionsHourly(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setDirectPlayRevenue(cursor.isNull(offset + 46) ? null : cursor.getDouble(offset + 46));
        entity.setDirectPlayRevenueHourly(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setDirectPlayImpressions(cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48));
        entity.setDirectPlayImpressionsHourly(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setDirectPlayClicks(cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50));
        entity.setDirectPlayClicksHourly(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setDirectPlayConversions(cursor.isNull(offset + 52) ? null : cursor.getInt(offset + 52));
        entity.setDirectPlayConversionsHourly(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TapjoyApp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TapjoyApp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "TapjoyResults" to-many relationship of AdPlacement. */
    public List<TapjoyApp> _queryAdPlacement_TapjoyResults(long AdPlacementId) {
        synchronized (this) {
            if (adPlacement_TapjoyResultsQuery == null) {
                QueryBuilder<TapjoyApp> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AdPlacementId.eq(null));
                adPlacement_TapjoyResultsQuery = queryBuilder.build();
            }
        }
        Query<TapjoyApp> query = adPlacement_TapjoyResultsQuery.forCurrentThread();
        query.setParameter(0, AdPlacementId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAdPlacementDao().getAllColumns());
            builder.append(" FROM TAPJOY_APP T");
            builder.append(" LEFT JOIN AD_PLACEMENT T0 ON T.\"AD_PLACEMENT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TapjoyApp loadCurrentDeep(Cursor cursor, boolean lock) {
        TapjoyApp entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        AdPlacement adPlacement = loadCurrentOther(daoSession.getAdPlacementDao(), cursor, offset);
         if(adPlacement != null) {
            entity.setAdPlacement(adPlacement);
        }

        return entity;    
    }

    public TapjoyApp loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TapjoyApp> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TapjoyApp> list = new ArrayList<TapjoyApp>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TapjoyApp> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TapjoyApp> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
