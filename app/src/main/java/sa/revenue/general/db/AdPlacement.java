package sa.revenue.general.db;

import java.util.List;
import de.greenrobot.dao.DaoException;
import sa.revenue.general.model.Advertiser;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "AD_PLACEMENT".
 */
public class AdPlacement {

    private Long id;
    private String Advertiser;
    private String AdvertiserAdId;
    private String AdvertiserAdName;
    private long AppId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AdPlacementDao myDao;

    private App app;
    private Long app__resolvedKey;

    private List<TapjoyApp> TapjoyResults;
    private List<AdmobAdUnit> AdmobResults;

    // KEEP FIELDS - put your custom fields here
    double Revenue;
    Advertiser AdCompany;
    // KEEP FIELDS END

    public AdPlacement() {
    }

    public AdPlacement(Long id) {
        this.id = id;
    }

    public AdPlacement(Long id, String Advertiser, String AdvertiserAdId, String AdvertiserAdName, long AppId) {
        this.id = id;
        this.Advertiser = Advertiser;
        this.AdvertiserAdId = AdvertiserAdId;
        this.AdvertiserAdName = AdvertiserAdName;
        this.AppId = AppId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdPlacementDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getAdvertiser() {
        return Advertiser;
    }

    public void setAdvertiser(String Advertiser) {
        this.Advertiser = Advertiser;
    }

    public String getAdvertiserAdId() {
        return AdvertiserAdId;
    }

    public void setAdvertiserAdId(String AdvertiserAdId) {
        this.AdvertiserAdId = AdvertiserAdId;
    }

    public String getAdvertiserAdName() {
        return AdvertiserAdName;
    }

    public void setAdvertiserAdName(String AdvertiserAdName) {
        this.AdvertiserAdName = AdvertiserAdName;
    }

    public long getAppId() {
        return AppId;
    }

    public void setAppId(long AppId) {
        this.AppId = AppId;
    }

    /** To-one relationship, resolved on first access. */
    public App getApp() {
        long __key = this.AppId;
        if (app__resolvedKey == null || !app__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AppDao targetDao = daoSession.getAppDao();
            App appNew = targetDao.load(__key);
            synchronized (this) {
                app = appNew;
            	app__resolvedKey = __key;
            }
        }
        return app;
    }

    public void setApp(App app) {
        if (app == null) {
            throw new DaoException("To-one property 'AppId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.app = app;
            AppId = app.getId();
            app__resolvedKey = AppId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TapjoyApp> getTapjoyResults() {
        if (TapjoyResults == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TapjoyAppDao targetDao = daoSession.getTapjoyAppDao();
            List<TapjoyApp> TapjoyResultsNew = targetDao._queryAdPlacement_TapjoyResults(id);
            synchronized (this) {
                if(TapjoyResults == null) {
                    TapjoyResults = TapjoyResultsNew;
                }
            }
        }
        return TapjoyResults;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTapjoyResults() {
        TapjoyResults = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<AdmobAdUnit> getAdmobResults() {
        if (AdmobResults == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AdmobAdUnitDao targetDao = daoSession.getAdmobAdUnitDao();
            List<AdmobAdUnit> AdmobResultsNew = targetDao._queryAdPlacement_AdmobResults(id);
            synchronized (this) {
                if(AdmobResults == null) {
                    AdmobResults = AdmobResultsNew;
                }
            }
        }
        return AdmobResults;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAdmobResults() {
        AdmobResults = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public double getRevenue() {
        return Revenue;
    }

    public void setRevenue(double revenue) {
        Revenue = revenue;
    }

    public Advertiser getAdCompany() {
        return AdCompany;
    }

    public void setAdCompany(Advertiser adCompany) {
        AdCompany = adCompany;
    }
    // KEEP METHODS END

}
