package sa.revenue.general.db;

import sa.revenue.general.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ADMOB_AD_UNIT".
 */
public class AdmobAdUnit {

    private Long id;
    private long AdPlacementId;
    private String AdClientId;
    private String AdUnitCode;
    private String AdUnitId;
    private String AdUnitName;
    private String Date;
    private String AdRequests;
    private String AdRequestsCoverage;
    private String Clicks;
    private String CostPerClick;
    private String Earnings;
    private String IndividualAdImpressions;
    private String IndividualAdImpressionsCtr;
    private String IndividualAdImpressionsRpm;
    private String MatchedAdRequests;
    private String MatchedAdRequestsCtr;
    private String MatchedAdRequestsRpm;
    private String PageViews;
    private String PageViewsCtr;
    private String PageViewsRpm;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AdmobAdUnitDao myDao;

    private AdPlacement adPlacement;
    private Long adPlacement__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AdmobAdUnit() {
    }

    public AdmobAdUnit(Long id) {
        this.id = id;
    }

    public AdmobAdUnit(Long id, long AdPlacementId, String AdClientId, String AdUnitCode, String AdUnitId, String AdUnitName, String Date, String AdRequests, String AdRequestsCoverage, String Clicks, String CostPerClick, String Earnings, String IndividualAdImpressions, String IndividualAdImpressionsCtr, String IndividualAdImpressionsRpm, String MatchedAdRequests, String MatchedAdRequestsCtr, String MatchedAdRequestsRpm, String PageViews, String PageViewsCtr, String PageViewsRpm) {
        this.id = id;
        this.AdPlacementId = AdPlacementId;
        this.AdClientId = AdClientId;
        this.AdUnitCode = AdUnitCode;
        this.AdUnitId = AdUnitId;
        this.AdUnitName = AdUnitName;
        this.Date = Date;
        this.AdRequests = AdRequests;
        this.AdRequestsCoverage = AdRequestsCoverage;
        this.Clicks = Clicks;
        this.CostPerClick = CostPerClick;
        this.Earnings = Earnings;
        this.IndividualAdImpressions = IndividualAdImpressions;
        this.IndividualAdImpressionsCtr = IndividualAdImpressionsCtr;
        this.IndividualAdImpressionsRpm = IndividualAdImpressionsRpm;
        this.MatchedAdRequests = MatchedAdRequests;
        this.MatchedAdRequestsCtr = MatchedAdRequestsCtr;
        this.MatchedAdRequestsRpm = MatchedAdRequestsRpm;
        this.PageViews = PageViews;
        this.PageViewsCtr = PageViewsCtr;
        this.PageViewsRpm = PageViewsRpm;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdmobAdUnitDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getAdPlacementId() {
        return AdPlacementId;
    }

    public void setAdPlacementId(long AdPlacementId) {
        this.AdPlacementId = AdPlacementId;
    }

    public String getAdClientId() {
        return AdClientId;
    }

    public void setAdClientId(String AdClientId) {
        this.AdClientId = AdClientId;
    }

    public String getAdUnitCode() {
        return AdUnitCode;
    }

    public void setAdUnitCode(String AdUnitCode) {
        this.AdUnitCode = AdUnitCode;
    }

    public String getAdUnitId() {
        return AdUnitId;
    }

    public void setAdUnitId(String AdUnitId) {
        this.AdUnitId = AdUnitId;
    }

    public String getAdUnitName() {
        return AdUnitName;
    }

    public void setAdUnitName(String AdUnitName) {
        this.AdUnitName = AdUnitName;
    }

    public String getDate() {
        return Date;
    }

    public void setDate(String Date) {
        this.Date = Date;
    }

    public String getAdRequests() {
        return AdRequests;
    }

    public void setAdRequests(String AdRequests) {
        this.AdRequests = AdRequests;
    }

    public String getAdRequestsCoverage() {
        return AdRequestsCoverage;
    }

    public void setAdRequestsCoverage(String AdRequestsCoverage) {
        this.AdRequestsCoverage = AdRequestsCoverage;
    }

    public String getClicks() {
        return Clicks;
    }

    public void setClicks(String Clicks) {
        this.Clicks = Clicks;
    }

    public String getCostPerClick() {
        return CostPerClick;
    }

    public void setCostPerClick(String CostPerClick) {
        this.CostPerClick = CostPerClick;
    }

    public String getEarnings() {
        return Earnings;
    }

    public void setEarnings(String Earnings) {
        this.Earnings = Earnings;
    }

    public String getIndividualAdImpressions() {
        return IndividualAdImpressions;
    }

    public void setIndividualAdImpressions(String IndividualAdImpressions) {
        this.IndividualAdImpressions = IndividualAdImpressions;
    }

    public String getIndividualAdImpressionsCtr() {
        return IndividualAdImpressionsCtr;
    }

    public void setIndividualAdImpressionsCtr(String IndividualAdImpressionsCtr) {
        this.IndividualAdImpressionsCtr = IndividualAdImpressionsCtr;
    }

    public String getIndividualAdImpressionsRpm() {
        return IndividualAdImpressionsRpm;
    }

    public void setIndividualAdImpressionsRpm(String IndividualAdImpressionsRpm) {
        this.IndividualAdImpressionsRpm = IndividualAdImpressionsRpm;
    }

    public String getMatchedAdRequests() {
        return MatchedAdRequests;
    }

    public void setMatchedAdRequests(String MatchedAdRequests) {
        this.MatchedAdRequests = MatchedAdRequests;
    }

    public String getMatchedAdRequestsCtr() {
        return MatchedAdRequestsCtr;
    }

    public void setMatchedAdRequestsCtr(String MatchedAdRequestsCtr) {
        this.MatchedAdRequestsCtr = MatchedAdRequestsCtr;
    }

    public String getMatchedAdRequestsRpm() {
        return MatchedAdRequestsRpm;
    }

    public void setMatchedAdRequestsRpm(String MatchedAdRequestsRpm) {
        this.MatchedAdRequestsRpm = MatchedAdRequestsRpm;
    }

    public String getPageViews() {
        return PageViews;
    }

    public void setPageViews(String PageViews) {
        this.PageViews = PageViews;
    }

    public String getPageViewsCtr() {
        return PageViewsCtr;
    }

    public void setPageViewsCtr(String PageViewsCtr) {
        this.PageViewsCtr = PageViewsCtr;
    }

    public String getPageViewsRpm() {
        return PageViewsRpm;
    }

    public void setPageViewsRpm(String PageViewsRpm) {
        this.PageViewsRpm = PageViewsRpm;
    }

    /** To-one relationship, resolved on first access. */
    public AdPlacement getAdPlacement() {
        long __key = this.AdPlacementId;
        if (adPlacement__resolvedKey == null || !adPlacement__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AdPlacementDao targetDao = daoSession.getAdPlacementDao();
            AdPlacement adPlacementNew = targetDao.load(__key);
            synchronized (this) {
                adPlacement = adPlacementNew;
            	adPlacement__resolvedKey = __key;
            }
        }
        return adPlacement;
    }

    public void setAdPlacement(AdPlacement adPlacement) {
        if (adPlacement == null) {
            throw new DaoException("To-one property 'AdPlacementId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.adPlacement = adPlacement;
            AdPlacementId = adPlacement.getId();
            adPlacement__resolvedKey = AdPlacementId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
